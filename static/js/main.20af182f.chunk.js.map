{"version":3,"sources":["common.js","Test.js","TSP.js","App.js","reportWebVitals.js","index.js"],"names":["style","zIndex","pointerEvents","opacity","top","selectedStyle","background","color","width","height","borderRadius","fontFamily","fontWeight","display","justifyContent","alignItems","answerStyle","unselectedStyle","edgeStyle","stroke","strokeWidth","selectedEdgeStyle","answerEdgeStyle","highlightEdgeOnSelect","elements","selectedElements","map","e","isEdge","hasOwnProperty","id","generateFlow","g","dagre","graphlib","Graph","multigraph","setGraph","marginx","marginy","setDefaultEdgeLabel","forEach","setNode","name","label","links","i","setEdge","toString","weight","layout","pos","number","angle","result","angleFactor","Math","PI","x","cos","y","sin","push","console","log","generatePositions","nodeCount","nodes","n","node","data","draggable","type","position","edges","v","w","points","edge","source","animated","target","labelBgPadding","labelBgBorderRadius","labelBgStyle","fill","labelStyle","selectedNodes","answerNodes","nodeTypes","customNode","TSP","props","onNodeDragStart","event","onNodeDragStop","onPaneClick","onPaneScroll","onPaneContextMenu","onSelectionDrag","onSelectionDragStart","onSelectionDragStop","onSelectionContextMenu","preventDefault","onMoveEnd","transform","generateAdjacencyMatrix","floor","random","array","Array","j","makeArray","h","val","arr","generateLinkNodeRep","adjMatrix","length","obj","getLinks","index","link","replay","matrix","setState","onElementsRemove","elementsToRemove","removeElements","state","onConnect","params","addEdge","elemetns","onLoad","reactFlowInstance","fitView","onSelectionChange","onElementClick","element","isNode","keepNode","start","end","elem1","find","elem2","delay","this","message","graph","memo","pow","prev","visited_all","travellingSalesmanProblem","answer","optimalPath","city","nextCity","z","sleep","path","ms","Promise","resolve","setTimeout","finalState","N","visitedMask","colorNode","deleteNode","min","Number","MAX_SAFE_INTEGER","ans","window","innerHeight","paneMoveable","connectionLineType","left","Button","variant","onClick","travellingSalesmanProblemHelper","paddingLeft","paddingRight","paddingTop","paddingBottom","border","Slider","max","value","step","onChange","aria-labelledby","valueLabelDisplay","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20af182f.chunk.js","sourcesContent":["import { Handle, isEdge } from 'react-flow-renderer';\nimport './App.css';\n\nconst style = {zIndex: -9999, pointerEvents: 'none', opacity: 0, top: '50%'};\n\n  const selectedStyle = {\n    background: '#23C779',\n    color: 'white',\n    width: 50,\n    height: 50,\n    borderRadius: 50 / 2,\n    fontFamily: 'Helvetica',\n    fontWeight: 'bold',\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  }\n\n  const answerStyle = {\n    background: '#d90368',\n    color: 'white',\n    width: 50,\n    height: 50,\n    borderRadius: 50 / 2,\n    fontFamily: 'Helvetica',\n    fontWeight: 'bold',\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  }\n\n  const unselectedStyle =  {\n    background: 'white',\n    color: '#23C779',\n    width: 50,\n    height: 50,\n    borderRadius: 50 / 2,\n    fontFamily: 'Helvetica',\n    fontWeight: 'bold',\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  };\n\n  const edgeStyle = {\n    stroke: \"#dddddddd\",\n    strokeWidth: 2,\n  }\n\n  const selectedEdgeStyle = {\n    stroke: \"#23C779\",\n    strokeWidth: 4,\n  }\n\n  const answerEdgeStyle = {\n    stroke: \"#d90368\",\n    strokeWidth: 4,\n  }\n\n  export const highlightEdgeOnSelect = (elements, selectedElements) => {\n    if(elements != null) {\n      const newElements = elements.map((e) => {\n        if(isEdge(e)) {\n          if(selectedElements.hasOwnProperty(e.id)) {\n            return {...e, style: selectedEdgeStyle};\n          } else {\n            return {...e, style: edgeStyle};\n          }\n        } else {\n          if(selectedElements.hasOwnProperty(e.id)) {\n            return {...e, style: selectedStyle};\n          } else {\n            return {...e, style: unselectedStyle};\n          }\n        }\n      });\n      return newElements;\n    } return elements\n  }\n\n  export const colorNodeSelect = (elements, selectedElements) => {\n    if(elements != null) {\n      const newElements = elements.map((e) => {\n        if(isEdge(e)) {\n          if(selectedElements.hasOwnProperty(e.id)) {\n            return {...e, style: answerEdgeStyle};\n          } else {\n            return {...e, style: edgeStyle};\n          }\n        } else {\n          if(selectedElements.hasOwnProperty(e.id)) {\n            return {...e, style: answerStyle};\n          } else {\n            return {...e, style: unselectedStyle};\n          }\n        }\n      });\n      return newElements;\n    } return elements\n  }\n  \n  export const customNode = ({ data }) => {\n    return (\n      <>\n      <Handle type=\"target\" position=\"top\" style={style} />\n      <div>\n            <div>{data.label}</div>\n      </div>\n      <Handle type=\"source\" position=\"top\" style={style} />\n    </>\n    );\n  };\n","import dagre from 'dagre';\n\nconst NODE_WIDTH = 50;\nconst NODE_HEIGHT = 50;\n\nexport const generateFlow = (elements) => {\n  \n  const g = new dagre.graphlib.Graph({ multigraph: true });\n\n  g.setGraph({\n    marginx: 50,\n    marginy: 50,\n  });\n  g.setDefaultEdgeLabel(function() { return {}; });\n\n  elements.forEach ((e) =>  {\n    g.setNode(e.name, {\n      label: e.name,\n      width: NODE_WIDTH,\n      height: NODE_HEIGHT\n    });\n    e.links.forEach((i) => {\n      g.setEdge(e.name, i.name, e.name.toString, i.weight);\n    });\n  });\n\n  dagre.layout(g);\n\n\n  const generatePositions = (number) => {\n    let result = [];\n    const angleFactor = 2 * Math.PI / number;\n    let angle;\n    for(let i = 0; i < number; i++) {\n      angle = i * angleFactor;\n      let x = 400 * Math.cos(angle);\n      let y= 400 * Math.sin(angle);\n      result.push([x, y]);\n    }\n    console.log(result);\n    return result;\n  }\n\n  const pos = generatePositions(g.nodeCount());\n\n  const nodes = g.nodes().map((i) => {\n    let n = g.node(i);\n    return {\n      id: i,\n      data: {\n        label: i\n      },\n      draggable: false,\n      style:  {\n        background: 'white',\n        color: '#23C779',\n        width: 50,\n        height: 50,\n        borderRadius: 50 / 2,\n        fontFamily: 'Helvetica',\n        fontWeight: 'bold',\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      },\n      type: 'customNode',\n      width: n.width, \n      height: n.height,\n      position: { \n        x: pos[i][0] - n.width /2,\n        y: pos[i][1]- n.height / 2\n      },\n    };\n  });\n\n  const edges = g.edges().map((e) => ({\n    id: `__${e.v}__${e.w}`,\n    points: g.edge(e).points,\n    source: e.w,\n    type: 'straight',\n    style: {\n        stroke: \"#dddddddd\",\n        strokeWidth: 2,\n    },\n    animated: false,\n    target: e.v,\n    label: 'Weight: ' + e.name,\n    labelBgPadding: [8, 4],\n    labelBgBorderRadius: 5,\n    labelBgStyle: { fill: '#dddddddd'},\n    labelStyle: { fill: '#110A2E', fontWeight: 700 },\n  }));\n \n  return [...nodes, ...edges];\n};\n\n// 23C779\n// 72E983\n// 2B1E68","import React, { Component } from \"react\";\nimport ReactFlow, {\n  removeElements,\n  addEdge,\n  Controls,\n  Background,\n  isNode,\n} from \"react-flow-renderer\";\nimport { customNode, highlightEdgeOnSelect, colorNodeSelect } from \"./common\";\nimport { generateFlow } from \"./Test\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\nimport ReplayIcon from '@material-ui/icons/Replay';\nvar selectedNodes = {};\nvar answerNodes = {};\nconst nodeTypes = {\n  customNode: customNode,\n};\n\nexport default class TSP extends Component {\n  onNodeDragStart = (event, node) => console.log(\"drag start\", node);\n  onNodeDragStop = (event, node) => console.log(\"drag stop\", node);\n  onPaneClick = (event) => console.log(\"pane click\", event);\n  onPaneScroll = (event) => console.log(\"pane scroll\", event);\n  onPaneContextMenu = (event) => console.log(\"pane context menu\", event);\n  onSelectionDrag = (event, nodes) => console.log(\"selection drag\", nodes);\n  onSelectionDragStart = (event, nodes) =>\n    console.log(\"selection drag start\", nodes);\n  onSelectionDragStop = (event, nodes) =>\n    console.log(\"selection drag stop\", nodes);\n  onSelectionContextMenu = (event, nodes) => {\n    event.preventDefault();\n    console.log(\"selection context menu\", nodes);\n  };\n\n  onMoveEnd = (transform) => console.log(\"zoom/move end\", transform);\n\n  generateAdjacencyMatrix = () => {\n    let x = Math.floor(Math.random() * 3 + 5);\n    var array = new Array(x);\n    for (let i = 0; i < x; i++) {\n      array[i] = [];\n    }\n    for (let i = 0; i < x; i++) {\n      for (let j = 0; j < x; j++) {\n        let y = Math.floor(Math.random() * 10 + 1);\n        if (i !== j) {\n          array[i][j] = array[j][i] = y;\n        } else {\n          array[i][j] = array[j][i] = 0;\n        }\n      }\n    }\n    return array;\n  };\n\n  makeArray = (w, h, val) => {\n    var arr = [];\n    for (let i = 0; i < h; i++) {\n      arr[i] = [];\n      for (let j = 0; j < w; j++) {\n        arr[i][j] = val;\n      }\n    }\n    return arr;\n  };\n\n  generateLinkNodeRep = (adjMatrix) => {\n    let result = [];\n    adjMatrix.forEach((arr) => {\n      for (let i = 0; i < arr.length; i++) {\n        let obj = {\n          name: i,\n          links: this.getLinks(i, adjMatrix),\n        };\n        result.push(obj);\n      }\n    });\n    return result;\n  };\n\n  getLinks = (index, adjMatrix) => {\n    let result = [];\n    for (let i = 0; i < adjMatrix[index].length; i++) {\n      if (adjMatrix[index][i] !== 0) {\n        let link = {\n          name: i,\n          weight: adjMatrix[index][i],\n        };\n        result.push(link);\n      }\n    }\n    return result;\n  };\n\n  constructor(props) {\n    super(props);\n    let matrix = this.generateAdjacencyMatrix();\n    this.state = {\n      matrix: matrix,\n      elements: generateFlow(this.generateLinkNodeRep(matrix)),\n      delay: 500,\n    };\n  }\n\n  replay = () => {\n    let matrix = this.generateAdjacencyMatrix();\n    this.setState({\n      matrix: matrix,\n      elements: generateFlow(this.generateLinkNodeRep(matrix)),\n    });\n  }\n\n  onElementsRemove = (elementsToRemove) =>\n    this.setState({\n      elements: removeElements(elementsToRemove, this.state.elements),\n    });\n  onConnect = (params) =>\n    this.setState({ elements: addEdge(params, this.state.elemetns) });\n  onLoad = (reactFlowInstance) => {\n    console.log(\"flow loaded:\", reactFlowInstance);\n    reactFlowInstance.fitView();\n  };\n  onSelectionChange = (elements) => {\n    console.log(\"selection change\", elements);\n  };\n\n  onElementClick = (event, element) => {\n    console.log(`${isNode(element) ? \"node\" : \"edge\"} click:`, element);\n    if (element != null) {\n      if (!selectedNodes.hasOwnProperty(element.id)) {\n        selectedNodes[element.id] = 1;\n      } else {\n        delete selectedNodes[element.id];\n      }\n      this.setState({\n        elements: highlightEdgeOnSelect(this.state.elements, selectedNodes),\n      });\n    }\n  };\n\n  colorNode(start, end) {\n    selectedNodes[this.state.elements[start].id] = 1;\n    let elem1 = this.state.elements.find((e) => e.id === `__${start}__${end}`);\n    let elem2 = this.state.elements.find((e) => e.id === `__${end}__${start}`);\n    selectedNodes[elem1.id] = 1;\n    selectedNodes[elem2.id] = 1;\n    this.setState({\n      elements: highlightEdgeOnSelect(this.state.elements, selectedNodes),\n      message: `Visiting Node ${end} from Node ${start}`,\n    });\n  }\n\n  keepNode = (start, end) => {\n    answerNodes[this.state.elements[start].id] = 1;\n    let elem1 = this.state.elements.find((e) => e.id === `__${start}__${end}`);\n    let elem2 = this.state.elements.find((e) => e.id === `__${end}__${start}`);\n    answerNodes[elem1.id] = 1;\n    answerNodes[elem2.id] = 1;\n    this.setState({\n      elements: colorNodeSelect(this.state.elements, answerNodes),\n    });\n  };\n\n  deleteNode(start, end) {\n    delete selectedNodes[this.state.elements[start].id];\n    let elem1 = this.state.elements.find((e) => e.id === `__${start}__${end}`);\n    let elem2 = this.state.elements.find((e) => e.id === `__${end}__${start}`);\n    delete selectedNodes[elem1.id];\n    delete selectedNodes[elem2.id];\n    this.setState({\n      elements: highlightEdgeOnSelect(this.state.elements, selectedNodes),\n      message: `Unvisiting Node ${end}`,\n    });\n  }\n\n  async travellingSalesmanProblemHelper(graph) {\n    let x = graph.length;\n    let memo = this.makeArray(x, Math.pow(2, x), -1);\n    let prev = this.makeArray(x, Math.pow(2, x), 0);\n    let visited_all = (1 << x) - 1;\n    let answer = await this.travellingSalesmanProblem(\n      graph,\n      prev,\n      memo,\n      visited_all,\n      x,\n      1,\n      0\n    );\n    let optimalPath = [];\n    let city = 0;\n    let position = 1;\n    while (true) {\n      optimalPath.push(city);\n      let nextCity = prev[position][city];\n      if (nextCity === 0) break;\n      let nextPosition = position | (1 << nextCity);\n      position = nextPosition;\n      city = nextCity;\n    }\n    optimalPath.push(0);\n    let z = optimalPath[0].toString();\n    for (let i = 1; i < optimalPath.length; i++) {\n      await this.sleep(this.state.delay);\n      this.keepNode(optimalPath[i - 1], optimalPath[i]);\n      z = z + \" --> \" + optimalPath[i].toString();\n    }\n    this.setState({\n      answer: answer,\n      path: z,\n      message: \"Found Path\",\n    });\n    return answer;\n  }\n\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  async travellingSalesmanProblem(\n    graph,\n    prev,\n    memo,\n    finalState,\n    N,\n    visitedMask,\n    position\n  ) {\n    if (visitedMask === finalState) {\n        this.colorNode(position, 0);\n        await this.sleep(this.state.delay / 2);\n        this.deleteNode(position, 0);\n      return graph[position][0];\n    } else if (memo[visitedMask][position] !== -1) {\n      return memo[visitedMask][position];\n    }\n    let min = Number.MAX_SAFE_INTEGER;\n    let index = -1;\n    for (let i = 0; i < N; i++) {\n      if ((visitedMask & (1 << i)) === 0) {\n        console.log(`Visiting Node ${i} from Node ${position}`);\n        this.colorNode(position, i);\n        await this.sleep(this.state.delay / 2);\n        let ans =\n          graph[position][i] +\n          (await this.travellingSalesmanProblem(\n            graph,\n            prev,\n            memo,\n            finalState,\n            N,\n            visitedMask | (1 << i),\n            i\n          ));\n        if (ans < min) {\n          index = i;\n          min = ans;\n        }\n        console.log(`Unvisiting Node ${i}`);\n        await this.sleep(this.state.delay / 2);\n        this.deleteNode(position, i);\n      }\n    }\n    prev[visitedMask][position] = index;\n    return (memo[visitedMask][position] = min);\n  }\n\n  render() {\n    return (\n      <div style={{ background: \"#110A2E\", height: window.innerHeight }}>\n        <ReactFlow\n          elements={this.state.elements}\n          onElementClick={this.onElementClick}\n          onElementsRemove={this.onElementsRemove}\n          onConnect={this.onConnect}\n          onPaneClick={this.onPaneClick}\n          paneMoveable={false}\n          onPaneScroll={this.onPaneScroll}\n          onPaneContextMenu={this.onPaneContextMenu}\n          onNodeDragStart={this.onNodeDragStart}\n          onNodeDragStop={this.onNodeDragStop}\n          onSelectionDragStart={this.onSelectionDragStart}\n          onSelectionDrag={this.onSelectionDrag}\n          onSelectionDragStop={this.onSelectionDragStop}\n          onSelectionContextMenu={this.onSelectionContextMenu}\n          onSelectionChange={this.onSelectionChange}\n          onMoveEnd={this.onMoveEnd}\n          onLoad={this.onLoad}\n          connectionLineType=\"straight\"\n          nodeTypes={nodeTypes}\n        >\n          <Controls />\n          <Background color=\"#ffffff22\"/>\n          <div\n            style={{ position: \"absolute\", left: 20, top: 70, color: \"white\" }}\n          >\n            Cost: {this.state.answer}\n          </div>\n          <div\n            style={{ position: \"absolute\", left: 20, top: 95, color: \"white\" }}\n          >\n            Path: {this.state.path}\n          </div>\n          <div\n            style={{ position: \"absolute\", left: 20, top: 120, color: \"white\" }}\n          >\n            Current: {this.state.message}\n          </div>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              this.travellingSalesmanProblemHelper(this.state.matrix);\n            }}\n            style={{\n              position: \"absolute\",\n              left: 20,\n              top: 20,\n              zIndex: 4,\n              background: \"#23C779\",\n              color: \"white\",\n              paddingLeft: 30,\n              paddingRight: 30,\n              paddingTop: 10,\n              paddingBottom: 10,\n              border: \"none\",\n              borderRadius: 4,\n            }}\n          >\n            Start\n          </Button>\n        <div style={{position: 'absolute', left: 20, top: 145, zIndex: 4, width: 100, color: 'white'}}>\n        Delay(ms)\n      </div>\n          <Slider\n          min={100}\n          max={1500}\n          value={this.state.delay}\n          step={50}\n          style={{color: '#23C779', position: 'absolute', left: 105, top: 140, zIndex: 4, width: 200}}\n            onChange={(event, value) => this.setState({delay: value})}\n            aria-labelledby=\"continuous-slider\"\n            valueLabelDisplay=\"auto\"\n          />\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              this.replay();\n            }}\n            style={{\n              position: \"absolute\",\n              left: 135,\n              top: 20,\n              zIndex: 4,\n              background: \"#d90368\",\n              color: \"white\",\n              paddingLeft: 30,\n              paddingRight: 30,\n              paddingTop: 10,\n              paddingBottom: 10,\n              border: \"none\",\n              borderRadius: 4,\n            }}\n          >\n            <ReplayIcon />\n          </Button>\n        </ReactFlow>\n      </div>\n    );\n  }\n}\n","import './App.css';\nimport TSP from './TSP';\n\nfunction App() {\n  return (\n    <div className = \"App\">\n    <div style={{height: window.innerHeight}}>\n    <TSP></TSP>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}